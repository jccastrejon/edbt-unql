/*
* generated by Xtext
*/
grammar InternalUnql;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.imag.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.imag.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.imag.services.UnqlGrammarAccess;

}

@parser::members {

 	private UnqlGrammarAccess grammarAccess;
 	
    public InternalUnqlParser(TokenStream input, UnqlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected UnqlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[Definitions]' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getDefinitionsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getDefinitionsDefinitionParserRuleCall_1_0()); 
	    }
		lv_definitions_1_0=ruleDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"definitions",
        		lv_definitions_1_0, 
        		"Definition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='[Connections]' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getConnectionsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getConnectionsConnectionParserRuleCall_3_0()); 
	    }
		lv_connections_3_0=ruleConnection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"connections",
        		lv_connections_3_0, 
        		"Connection");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='[Queries]' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProgramAccess().getQueriesKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getQueriesSelectParserRuleCall_5_0()); 
	    }
		lv_queries_5_0=ruleSelect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"queries",
        		lv_queries_5_0, 
        		"Select");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='define' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefinitionAccess().getDefineKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDefinitionAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefinitionAccess().getAsKeyword_2());
    }
(
(
(
		lv_type_3_1=	'graph' 
    {
        newLeafNode(lv_type_3_1, grammarAccess.getDefinitionAccess().getTypeGraphKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_3_1, null);
	    }

    |		lv_type_3_2=	'document' 
    {
        newLeafNode(lv_type_3_2, grammarAccess.getDefinitionAccess().getTypeDocumentKeyword_3_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_3_2, null);
	    }

)

)
))
;





// Entry rule entryRuleConnection
entryRuleConnection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConnectionRule()); }
	 iv_ruleConnection=ruleConnection 
	 { $current=$iv_ruleConnection.current; } 
	 EOF 
;

// Rule Connection
ruleConnection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='connect' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConnectionAccess().getConnectKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConnectionAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConnectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='url' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConnectionAccess().getUrlKeyword_2());
    }
(
(
		lv_url_3_0=RULE_STRING
		{
			newLeafNode(lv_url_3_0, grammarAccess.getConnectionAccess().getUrlSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConnectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"url",
        		lv_url_3_0, 
        		"STRING");
	    }

)
)(	otherlv_4='username' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConnectionAccess().getUsernameKeyword_4_0());
    }
(
(
		lv_username_5_0=RULE_STRING
		{
			newLeafNode(lv_username_5_0, grammarAccess.getConnectionAccess().getUsernameSTRINGTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConnectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"username",
        		lv_username_5_0, 
        		"STRING");
	    }

)
)	otherlv_6='password' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConnectionAccess().getPasswordKeyword_4_2());
    }
(
(
		lv_password_7_0=RULE_STRING
		{
			newLeafNode(lv_password_7_0, grammarAccess.getConnectionAccess().getPasswordSTRINGTerminalRuleCall_4_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConnectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"password",
        		lv_password_7_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	 iv_ruleSelect=ruleSelect 
	 { $current=$iv_ruleSelect.current; } 
	 EOF 
;

// Rule Select
ruleSelect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='select' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectAccess().getSelectKeyword_0());
    }
(
(
		lv_attributes_1_0=RULE_STRING
		{
			newLeafNode(lv_attributes_1_0, grammarAccess.getSelectAccess().getAttributesSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"attributes",
        		lv_attributes_1_0, 
        		"STRING");
	    }

)
)*	otherlv_2='from' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectAccess().getFromKeyword_2());
    }
(
(
		lv_relations_3_0=RULE_STRING
		{
			newLeafNode(lv_relations_3_0, grammarAccess.getSelectAccess().getRelationsSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"relations",
        		lv_relations_3_0, 
        		"STRING");
	    }

)
)*(	otherlv_4='where' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSelectAccess().getWhereKeyword_4_0());
    }
(
(
		lv_conditions_5_0=RULE_STRING
		{
			newLeafNode(lv_conditions_5_0, grammarAccess.getSelectAccess().getConditionsSTRINGTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"conditions",
        		lv_conditions_5_0, 
        		"STRING");
	    }

)
)*)?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


