[comment encoding = UTF-8 /]
[module UtilTemplate('http://www.imag.fr/Unql')]

[**
 * 
*/]
[query public executeGraphQuery(relationName : String, attributes : Sequence(String), conditions : Sequence(String)) : String = 
	invoke('fr.imag.unql.transformation.util.Neo4jUtil', 'executeQuery(java.lang.String, java.util.List, java.util.List)', Sequence{relationName, attributes, conditions}) /]

[**
 * 
*/]
[query public executeDocumentQuery(relationName : String, attributes : Sequence(String), conditions : Sequence(String)) : String = 
	invoke('fr.imag.unql.transformation.util.MongoDBUtil', 'executeQuery(java.lang.String, java.util.List, java.util.List)', Sequence{relationName, attributes, conditions}) /]

[**
 * 
*/]
[query public getDatabasesType(aProgram: Program, expectedType: String) : Set(Definition) =  
aProgram.definitions
	->select(definition:Definition | definition.type.equalsIgnoreCase(expectedType)) /]

[**
 * 
*/]
[query public getConnections(aProgram: Program) : Set(Connection) = aProgram.connections /]

[**
 * 
*/]
[query public getConnection(connections : Set(Connection), databaseName : String) : Connection = 
connections->select(connection:Connection | 
	connection.name.equalsIgnoreCase(databaseName))->asSequence()->first() /]

[**
 * 
*/]
[query public existsInSet(elementName : String, definitions : Set(Definition)) : Boolean = 
	definitions->exists(definition:Definition | definition.name.equalsIgnoreCase(elementName)) /]

[**
 * 
*/]
[query public getAssociatedElements(relationName : String, attributes : Sequence(String)) : Sequence(String) =  
	attributes->select(attribute : String | attribute.startsWith(relationName + '.'))/]